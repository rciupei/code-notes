{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/cs/data-structures/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Data structures\",\n  \"emoji\": null,\n  \"tags\": [\"cs\"],\n  \"link\": \"https://www.youtube.com/watch?v=RBSGKlAvoiM\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"abstract-data-type\"\n  }, \"Abstract Data Type\"), mdx(\"p\", null, \"An \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"abstract data type\"), \" (ADT) is an abstraction of a data structure which provides only the interface to which a data structure must adhere to.\"), mdx(\"p\", null, \"The interface does not give any specific details about how something should be implemented or in what programming language\"), mdx(\"p\", null, \"e.g.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Abstraction (ADT)\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Implementation(DS)\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"List\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Dynamic Array \", mdx(\"br\", null), \" Linked List\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Queue\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Linked List based \", mdx(\"br\", null), \" Queue Array Based Queue \", mdx(\"br\", null), \" Stack based Queue\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Map\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Tree Map \", mdx(\"br\", null), \" Hash Map / Hash Table\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Vehicle\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Golf Cart \", mdx(\"br\", null), \" Bicycle \", mdx(\"br\", null), \" Smart Car\")))), mdx(\"h2\", {\n    \"id\": \"computational-complexity\"\n  }, \"Computational complexity\"), mdx(\"p\", null, \"How much time and space needs an algorithm to finish?\"), mdx(\"h3\", {\n    \"id\": \"big-o-notation\"\n  }, \"Big-O Notation\"), mdx(\"p\", null, \"Big-O notation gives an upper bound\\nof the computational complexity of\\nan algorithm in the worst case.\"), mdx(\"p\", null, \"This helps us quantify performance\\nof algorithms as the input size\\nbecomes arbitrarily large.\"), mdx(\"p\", null, \"n - The size of the input\\nComplexities ordered in from smallest to largest\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Time\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Complexitiy\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Constant Time:\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"O(1)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Logarithmic Time:\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"O(log(n))\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Linear Time:\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"O(n)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Linearithmic Time:\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"O(nlog(n))\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Quadratic Time:\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"O(n2)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Cubic Time:\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"O(n3)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Exponential Time:\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"O(bn), b > 1\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Factorial Time:\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"O(n!)\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Data structures","tags":["cs"],"emoji":null,"link":"https://www.youtube.com/watch?v=RBSGKlAvoiM"},"fields":{"dateModified":"24th Jul 2020","slug":"/cs/data-structures/"},"tableOfContents":{"items":[{"url":"#abstract-data-type","title":"Abstract Data Type"},{"url":"#computational-complexity","title":"Computational complexity","items":[{"url":"#big-o-notation","title":"Big-O Notation"}]}]},"parent":{"__typename":"File","relativePath":"cs/data-structures.md"}}},"pageContext":{"id":"dd4d0e87-437b-515c-8a12-1314132b0aa1","previous":{"id":"978e361b-b88e-5138-96e8-5c85f1ba8883","frontmatter":{"title":"Flexbox alignment","tags":["css","flexbox"]},"fields":{"slug":"/css/flexbox-alignment/"}},"next":{"id":"a143c142-a906-5397-9684-8d5191274f09","frontmatter":{"title":"Example note updated 2","tags":["example"]},"fields":{"slug":"/example-note/"}},"hasUntagged":false,"basePath":"/"}}}